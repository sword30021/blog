{"meta":{"title":"自由的程序员","subtitle":"生活是一场马拉松，学习亦是如此","description":"IT技术学习和记录","author":"妞妞骑毛驴","url":"https://sword30021.github.io/blog"},"pages":[],"posts":[{"title":"Java-获取当前是星期几的2种方式","slug":"Java-获取当前是星期几的2种方式","date":"2016-10-05T03:53:09.000Z","updated":"2016-10-05T03:54:12.000Z","comments":true,"path":"2016/10/05/Java-获取当前是星期几的2种方式/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/05/Java-获取当前是星期几的2种方式/","excerpt":"","text":"方式1：使用Calendar类 /** * 获取当前日期是星期几&lt;br&gt; * * @param dt * @return 当前日期是星期几 */ public static String getWeekOfDate(Date dt) { String[] weekDays = {&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;}; Calendar cal = Calendar.getInstance(); cal.setTime(dt); int w = cal.get(Calendar.DAY_OF_WEEK) - 1; if (w &lt; 0) w = 0; return weekDays[w]; } 方式2：使用SimpleDateFormat格式化日期 Date date=new Date(); SimpleDateFormat dateFm = new SimpleDateFormat(&quot;EEEE&quot;); dateFm.format(date); 注：格式化字符串存在区分大小写对于创建SimpleDateFormat传入的参数：EEEE代表星期，如“星期四”；MMMM代表中文月份，如“十一月”；MM代表月份，如“11”；yyyy代表年份，如“2010”；dd代表天，如“25”","categories":[{"name":"Java","slug":"Java","permalink":"https://sword30021.github.io/blog/categories/Java/"},{"name":"开发知识","slug":"Java/开发知识","permalink":"https://sword30021.github.io/blog/categories/Java/开发知识/"},{"name":"Other","slug":"Java/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Java/开发知识/Other/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://sword30021.github.io/blog/tags/Java/"},{"name":"Java_datetime","slug":"Java-datetime","permalink":"https://sword30021.github.io/blog/tags/Java-datetime/"}],"keywords":[{"name":"Java","slug":"Java","permalink":"https://sword30021.github.io/blog/categories/Java/"},{"name":"开发知识","slug":"Java/开发知识","permalink":"https://sword30021.github.io/blog/categories/Java/开发知识/"},{"name":"Other","slug":"Java/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Java/开发知识/Other/"}]},{"title":"Android-string.xml中添加特殊字符，ASCII码常用列表(持续更新)","slug":"Android-string-xml中添加特殊字符，ASCII码常用列表-持续更新","date":"2016-10-05T02:13:39.000Z","updated":"2016-10-05T02:14:08.000Z","comments":true,"path":"2016/10/05/Android-string-xml中添加特殊字符，ASCII码常用列表-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/05/Android-string-xml中添加特殊字符，ASCII码常用列表-持续更新/","excerpt":"","text":"需求： 项目中要再string.xml中显示特殊字符。 使用方式： 在string.xml中使用时，ASCII码后边要拼接“;”，例如：“&amp;#32”+“;”，就会显示空格。 常用列表： ASCII码 符号 备注 &amp;#032 空格 &#033; ! &#034; “ xml中需要在前面加入\\ &#035; # &#036; $ &#037; % &#038; &amp; &#039; ‘ &#040; ( &#041; ) &#042; * &#043; + &#044; , &#045; - &#046; . &#047; / &#058; : &#059; ; &#060; &lt; &#061; = &#062; &gt; &#063; ? &#064; @ &amp;#091 [ &amp;#092 \\ &amp;#093 ] &amp;#094 ^ &amp;#095 _ &amp;#096 ` &amp;#123 { &amp;#124 竖直线 &amp;#125 } &amp;#126 ~ &amp;#160 空格 这边是空格,在xml首字符中不会被忽略 &amp;#161 ¡ &amp;#162 ¢ &amp;#163 £ &amp;#164 ¤ &amp;#165 ¥ &amp;#166 ¦ &amp;#167 § &amp;#168 ¨ &#169; © &amp;#170 ª &amp;#171 « &amp;#172 ¬ &amp;#173 空格 &amp;#174 ® &amp;#175 ¯ &amp;#176 ° &amp;#177 ± &amp;#178 ² &amp;#179 ³ &amp;#180 ´ &amp;#181 µ &amp;#182 ¶ &amp;#183 • &amp;#184 ¸ &amp;#185 ¹ &amp;#186 º &amp;#187 » &amp;#188 ¼ &amp;#189 ½ &amp;#190 ¾","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_string","slug":"Android-string","permalink":"https://sword30021.github.io/blog/tags/Android-string/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"Android-Touch事件处理机制，解决滑动时间冲突","slug":"Android-Touch事件处理机制，解决滑动时间冲突","date":"2016-10-05T01:16:05.000Z","updated":"2016-10-05T07:21:04.000Z","comments":true,"path":"2016/10/05/Android-Touch事件处理机制，解决滑动时间冲突/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/05/Android-Touch事件处理机制，解决滑动时间冲突/","excerpt":"","text":"Android系统中的每个View的子类都具有下面三个和TouchEvent处理密切相关的方法： public boolean dispatchTouchEvent(MotionEvent ev)这个方法用来分发TouchEvent public boolean onInterceptTouchEvent(MotionEvent ev)这个方法用来拦截TouchEvent public boolean onTouchEvent(MotionEvent ev)这个方法用来处理TouchEvent 当TouchEvent发生时，首先Activity将TouchEvent传递给最顶层的View， TouchEvent最先到达最顶层 view 的 dispatchTouchEvent ，然后由 dispatchTouchEvent 方法进行分发，如果dispatchTouchEvent返回true ，则交给这个view的onTouchEvent处理，如果dispatchTouchEvent返回 false ，则交给这个 view 的 interceptTouchEvent 方法来决定是否要拦截这个事件，如果 interceptTouchEvent 返回 true ，也就是拦截掉了，则交给它的 onTouchEvent 来处理，如果 interceptTouchEvent 返回 false ，那么就传递给子 view ，由子 view 的 dispatchTouchEvent 再来开始这个事件的分发。如果事件传递到某一层的子 view 的 onTouchEvent 上了，这个方法返回了 false ，那么这个事件会从这个 view 往上传递，都是 onTouchEvent 来接收。而如果传递到最上面的 onTouchEvent 也返回 false 的话，这个事件就会“消失”，而且接收不到下一次事件。 让子先处理的方法是从写父的onInterceptTouchEvent事件并返回false public boolean onInterceptTouchEvent(MotionEvent ev) { return false; } Ps：参考资料 Android View事件机制 21问21答","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_touch","slug":"Android-touch","permalink":"https://sword30021.github.io/blog/tags/Android-touch/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"Android-string.xml动态替换文本","slug":"Android-string-xml动态替换文本","date":"2016-10-04T15:19:07.000Z","updated":"2016-10-04T15:20:05.000Z","comments":true,"path":"2016/10/04/Android-string-xml动态替换文本/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/04/Android-string-xml动态替换文本/","excerpt":"","text":"需求：我是做Android开发的，工作3年了。这段字符串中，Android和3需要动态替换。 在string.xml中定义： &lt;string name=&quot;demo&quot;&gt;我是做%1$s开发的，工作%2$d了。&lt;/string&gt; 在程序中使用： String input = getResources().getString(R.string.demo); String ouput = String.format(input, &quot;Android&quot;, 3); 输入出结果：我是做Android开发的，工作3年了。 解释： %1$s：1是指位置1，小写s是指定替换类型为字符串。%2$d：2是指位置2，小写d是指定替换类型为整数。其他的类似，灵活运用即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_string","slug":"Android-string","permalink":"https://sword30021.github.io/blog/tags/Android-string/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"Android-adb常用命令整理(持续更新)","slug":"Android-adb常用命令整理-持续更新","date":"2016-10-04T11:46:46.000Z","updated":"2016-10-04T11:47:53.000Z","comments":true,"path":"2016/10/04/Android-adb常用命令整理-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/04/Android-adb常用命令整理-持续更新/","excerpt":"","text":"1、显示当前连接的设备 $ adb devices 2、如果要对设备进行有特殊权限的操作，就需要有root权限 $ adb root 3、如果要手机上安装apk $ adb install xxx.apk 4、重新安装某apk $ adb install -r xxx.apk 5、卸载某apk $ adb uninstall &lt;apk的主包名&gt; 6、查看手机上运行日志 $ adb logcat 7、启动activity $ adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE 或者 $ adb shell am start PACKAGE_NAME/FULLY_QUALIFIED_ACTIVITY 8、A为手机路径，B为电脑路径，意思为：把文件从手机中复制到电脑上 $ adb pull 9、A为手机路径，B为电脑路径，意思为：把文件从电脑复制到手机上 $ adb push 10、进入手机的超级终端Terminal $ adb shell 11、重新挂载文件系统 $ adb remount 12、重启手机 $ adb reboot 13、重启到Recovery界面 $ adb reboot recovery 14、重启到bootloader界面 $ adb reboot bootloader 15、获取设备的序列号 $ adb get-serialno 16、查询adb的版本号 $ adb version 17、从设备中导出文件 $ adb pull &lt;文件路径&gt; &lt;新生成的文件名&gt; Ps：参考资料 ADB基本的命令讲解","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_adb","slug":"Android-adb","permalink":"https://sword30021.github.io/blog/tags/Android-adb/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"Android-避免App启动黑白屏闪现的2种方式","slug":"Android-避免App启动黑白屏闪现的2种方式","date":"2016-10-03T06:16:53.000Z","updated":"2016-10-03T06:19:36.000Z","comments":true,"path":"2016/10/03/Android-避免App启动黑白屏闪现的2种方式/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/03/Android-避免App启动黑白屏闪现的2种方式/","excerpt":"","text":"App每次启动程序都会闪一下黑屏或白屏(取决于使用的全局样式)，因为启动Activity的时候，需要执行完onCreate和onResume才会显示界面。也就是说需要处理一些数据后，才会显示，就算onCreate方法里什么不做，仍然会闪一下黑屏，因为初始化解析界面时需要一定时间。 1、自定义Theme &lt;style name=&quot;Theme.AppStartLoad&quot; parent=&quot;android:Theme&quot;&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/ic_splash&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;/style&gt; 2、设置透明Theme &lt;style name=&quot;Theme.AppStartLoadTranslucent&quot; parent=&quot;android:Theme&quot;&gt; &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;/style&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"常用正则表达式收集(持续更新)","slug":"常用正则表达式收集-持续更新","date":"2016-10-03T03:23:31.000Z","updated":"2016-10-03T06:22:35.000Z","comments":true,"path":"2016/10/03/常用正则表达式收集-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/10/03/常用正则表达式收集-持续更新/","excerpt":"","text":"1、校验密码强度 密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。 ^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$ 2、校验中文 字符串仅能是中文。 ^[\\\\u4e00-\\\\u9fa5]{0,}$ 3、由数组、26个英文字母或下划线组成的字符串 ^\\\\w+$ 4、校验e-mail地址 [\\\\w!#$%&amp;&apos;*+/=?^_`{|}~-]+(?:\\\\.[\\\\w!#$%&amp;&apos;*+/=?^_`{|}~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?\\\\.)+[\\\\w](?:[\\\\w-]*[\\\\w])? 5、校验身份证号码 15位： ^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$ 18位： ^[1-9]\\\\d{5}[1-9]\\\\d{3}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}([0-9]|X)$ 6、校验日期 “yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。 ^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$ 7、校验金额 金额校验，精确到2位小数。 ^[0-9]+(.[0-9]{2})?$ 8、校验手机号 下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码） ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\\\d{8}$ 9、判断IE的版本 IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。 ^.*MSIE [5-8](?:\\\\.[0-9]+)?(?!.*Trident\\\\/[5-9]\\\\.0).*$ 10、校验IP地址 IP4 正则语句: \\\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\b IP6 正则语句: (([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])) 11、检查URL的前缀 应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。 if (!s.match(/^[a-zA-Z]+:\\\\/\\\\//)){ s = &apos;http://&apos; + s;} 12、提取URL链接 下面的这个表达式可以筛选出一段文本中的URL。 ^(f|ht){1}(tp|tps):\\\\/\\\\/([\\\\w-]+\\\\.)+[\\\\w-]+(\\\\/[\\\\w- ./?%&amp;=]*)? 13、文件路径及扩展名校验 验证windows下文件路径和扩展名（下面的例子中为.txt文件） ^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)[^\\/:?”&lt;&gt;|]+\\.txt(l)?$ 14、提取Color Hex Codes 有时需要抽取网页中的颜色代码，可以使用下面的表达式。 ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$ 15、提取网页图片 假若你想提取网页中所有图片信息，可以利用下面的表达式。 \\\\&lt; *[img][^\\\\&gt;]*[src] *= *[\\\\&quot;\\\\&apos;]{0,1}([^\\\\&quot;\\\\&apos;\\\\ &gt;]*) 16、提取页面超链接 提取html中的超链接。 (&lt;a\\\\s*(?!.*\\\\brel=)[^&gt;]*)(href=&quot;https?:\\\\/\\\\/)((?!(?:(?:www\\\\.)?&apos;.implode(&apos;|(?:www\\\\.)?&apos;, $follow_list).&apos;))[^&quot;]+)&quot;((?!.*\\\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt; 17、查找CSS属性 通过下面的表达式，可以搜索到相匹配的CSS属性。 ^\\\\s*[a-zA-Z\\\\-]+\\\\s*[:]{1}\\\\s[a-zA-Z0-9\\\\s.#]+[;]{1} 18、抽取注释 如果你需要移除HMTL中的注释，可以使用如下的表达式。 &lt;!--(.*?)--&gt; 19、匹配HTML标签 通过下面的表达式可以匹配出HTML中的标签属性。 &lt;\\\\/?\\\\w+((\\\\s+\\\\w+(\\\\s*=\\\\s*(?:&quot;.*?&quot;|&apos;.*?&apos;|[\\\\^&apos;&quot;&gt;\\\\s]+))?)+\\\\s*|\\\\s*)\\\\/?&gt; Ps：参考资料 正则表达式 匹配中文，英文字母和数字及_的写法！同时控制长度","categories":[{"name":"其它","slug":"其它","permalink":"https://sword30021.github.io/blog/categories/其它/"},{"name":"正则表达式","slug":"其它/正则表达式","permalink":"https://sword30021.github.io/blog/categories/其它/正则表达式/"}],"tags":[{"name":"Regex","slug":"Regex","permalink":"https://sword30021.github.io/blog/tags/Regex/"}],"keywords":[{"name":"其它","slug":"其它","permalink":"https://sword30021.github.io/blog/categories/其它/"},{"name":"正则表达式","slug":"其它/正则表达式","permalink":"https://sword30021.github.io/blog/categories/其它/正则表达式/"}]},{"title":"Android Studio配置正式签名和debug签名","slug":"Android-Studio配置正式签名和debug签名","date":"2016-09-30T09:18:24.000Z","updated":"2016-10-02T08:55:14.000Z","comments":true,"path":"2016/09/30/Android-Studio配置正式签名和debug签名/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/30/Android-Studio配置正式签名和debug签名/","excerpt":"","text":"需求：如果应用中牵扯到第三方平台集成的话，调试是非常讨厌的一件事，因为很多第三方要求正式签名后生成的包才可以正常使用。所以，在debug模式下配置正式签名包，就可以解决问题。 在主工程(一般都是app)下的build.gradle里，配置2个签名： signingConfigs { release { keyAlias &apos;###&apos; keyPassword &apos;******&apos; storeFile file(&apos;../###.jks&apos;) storePassword &apos;******&apos; } debug { keyAlias &apos;androiddebugkey&apos; keyPassword &apos;android&apos; storeFile file(&apos;./debug.keystore&apos;) storePassword &apos;android&apos; } buildTypes { debug { signingConfig signingConfigs.release } release { signingConfig signingConfigs.release } } 其中keyAlias是签名的别名，keyPassword是签名密码，storeFile file是签名文件所在文件夹位置，这里是放在和app同级目录下。到这里就可以，但是为了保护签名信息，可以优化处理：在项目根目录下的gradle.properties文件中添加： RELEASE_KEY_PASSWORD=****** //签名密码 RELEASE_KEY_ALIAS=****** //签名别名 RELEASE_STORE_PASSWORD=****** //store密码 RELEASE_STORE_FILE=***.jks //签名文件地址 然后修改之前的配置： signingConfigs { release { keyAlias RELEASE_KEY_ALIAS keyPassword RELEASE_KEY_PASSWORD storeFile file(RELEASE_STORE_FILE) storePassword RELEASE_STORE_PASSWORD } config { keyAlias &apos;androiddebugkey&apos; keyPassword &apos;android&apos; storeFile file(&apos;./debug.keystore&apos;) storePassword &apos;android&apos; } }","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发工具","slug":"Android/开发工具","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/"},{"name":"Android Studio","slug":"Android/开发工具/Android-Studio","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/Android-Studio/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_tools","slug":"Android-tools","permalink":"https://sword30021.github.io/blog/tags/Android-tools/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发工具","slug":"Android/开发工具","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/"},{"name":"Android Studio","slug":"Android/开发工具/Android-Studio","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/Android-Studio/"}]},{"title":"git-命令行常用命令集锦(持续更新)","slug":"git-命令行常用命令集锦-持续更新","date":"2016-09-26T10:26:48.000Z","updated":"2016-10-02T08:34:21.000Z","comments":true,"path":"2016/09/26/git-命令行常用命令集锦-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/26/git-命令行常用命令集锦-持续更新/","excerpt":"","text":"1、git clone 从远程主机克隆一个版本库 $ git clone &lt;版本库的网址&gt; 该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。 $ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt; git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，例如： $ git clone http[s]://example.com/path/to/repo.git/ $ git clone ssh://example.com/path/to/repo.git/ $ git clone git://example.com/path/to/repo.git/ $ git clone /opt/git/project.git $ git clone file:///opt/git/project.git $ git clone ftp[s]://example.com/path/to/repo.git/ $ git clone rsync://example.com/path/to/repo.git/ SSH协议还有另一种写法。 $ git clone [user@]example.com:path/to/repo.git/ 通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。 如果想要从远程仓库中克隆一个特定的分支该怎么做呢？通常你会使用git clone，不过这么做会将所有其他分支都一并克隆下来。一个便捷的方式是使用git remote add： $ git init $ git remote add -t -f origin $ git checkout 如果只想将远程仓库的一个特定提交合并到自己的分支中该怎么做呢？可以使用git cherry-pick 来选择给定SHA值的提交，然后将其合并到当前分支中： $ git cherry-pick 2、git remote 为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。不带选项的时候，git remote命令列出所有远程主机。使用-v选项，可以参看远程主机的网址。 $ git remote -v 克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。 $ git clone -o yourname git remote show命令加上主机名，可以查看该主机的详细信息。 $ git remote show &lt;主机名&gt; git remote add命令用于添加远程主机。 $ git remote add &lt;主机名&gt; &lt;网址&gt; git remote rm命令用于删除远程主机。 $ git remote rm &lt;主机名&gt; git remote rename命令用于远程主机的改名。 $ git remote rename &lt;原主机名&gt; &lt;新主机名&gt; 3、git fetch 一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。 $ git fetch &lt;远程主机名&gt; 上面命令将某个远程主机的更新，全部取回本地。默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。 $ git fetch &lt;远程主机名&gt; &lt;分支名&gt; 比如，取回origin主机的master分支。 $ git fetch origin master 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。 $ git branch -r $ git branch -a 上面命令表示，本地主机的当前分支是master，远程分支是origin/master。取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。 $ git checkout -b newBrach origin/master 上面命令表示，在origin/master的基础上，创建一个新分支。此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。 $ git merge origin/master # 或者 $ git rebase origin/master 上面命令表示在当前分支上，合并origin/master。 4、git pull git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。 $ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。 $ git pull origin next:master 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 $ git pull origin next 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。 $ git fetch origin $ git merge origin/next 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。Git也允许手动建立追踪关系。 $ git branch --set-upstream master origin/next 上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。 $ git pull origin 上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。如果当前分支只有一个追踪分支，连远程主机名都可以省略。 $ git pull 上面命令表示，当前分支自动与唯一一个追踪分支进行合并。如果合并需要采用rebase模式，可以使用–rebase选项。 $ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 5、git push git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。 $ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。 $ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 $ git push origin :master # 等同于 $ git push origin --delete master 上面命令表示删除origin主机的master分支。如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。 $ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。 $ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。 $ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。 $ git config --global push.default matching # 或者 $ git config --global push.default simple 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。 $ git push --all origin 上面命令表示，将所有本地分支都推送到origin主机。如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。 $ git push --force origin 上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并（non-fast-forward merge）。除非你很确定要这样做，否则应该尽量避免使用–force选项。最后，git push不会推送标签（tag），除非使用–tags选项。 $ git push origin --tags 6、git log 日志输出 $ git log -author=&quot;aname&quot; 只显示某个用户的提交 $ git log -name-only 只显示变更了的文件的名称 $ git log -oneline 将提交信息压缩成一行显示 $ git log -graph 显示所有提交的依赖树 $ git log -reverse 按照反序显示提交记录（最旧的提交在最前面） $ git log -after 显示某个日期之后的提交 $ git log -before 显示某个日期之前的提交 $ git log -p filename 查看某个文件的变更日志 $ git log -L 1,1:filename 查看某文件（1,1）位置的变更日志 $ git blame filename 查看某文件中的每一行是由谁变更的 $ git log --no-merges master.. 查看尚未合并到父分支的变更日志，注意–no-merges 选项意味着只显示没有合并到任何分支的变更，master..选项意味着只显示没有合并到master分支的变更（你必须在master后面加上..）。也可以使用 git show –no-merges master.. 或者 git log -p –no-merges master.. 命令（输出结果相同）来查看一下尚未合并的文件的详细变更。 $ git show branchname:filename 查看指定分支上的指定文件的内容 $ git show branchname filename 查看指定分支上的指定文件和当前分支上的对应文件的差异 $ git pull --reabase 重新设置基线，这个命令会迫使git先将远程分支上的变更pull到本地，然后将尚未push的提交重新以这个最新版本作为基础添加进去，这样就可以避免合并以及丑陋的合并信息了。 $ git rebase 相当与一次执行git pull和git merge，不同是的是，git会保留提交历史轨迹。在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用”git-add”命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行: $ git rebase --continue 这样git会继续应用(apply)余下的补丁。在任何时候，你可以用–abort参数来终止rebase的行动，并且本地分支会回到rebase开始前的状态。 $ git rebase --abort $ git merge --no-ff 本地合并后保留分支结构。 $ git commit --amend 修复你之前的提交，而不是重新提交，也就是说修改的提交会追加到之前commit上，而不会产生新的commit。 $ git reset --hard commit-hash 回滚到一个特定的历史版本，所有这次提交之后的变更都将被丢弃。 $ git reset commit-hash 回滚到一个特定的历史版本，所有这次提交之后的变更都将被移到“准备提交且未暂存”状态，这意味着你必须使用git add . 和git commit把他们添加回仓库。 $ git reset --soft commit-hash 回滚到一个特定的历史版本，所有这次提交之后的变更都将被移到“准备提交且已暂存”的状态，这意味着你仅仅只要执行git commit命令将它们添加回仓库。 $ git checkout filename 取消某文件的本地变更。 $ git revert -n 自动将回滚的文件重新提交到仓库，并且提示你要写一个新的提交信息。-n 选项告诉git先别急着提交，因为我只是想看一眼罢了。 7、git clean 有时，Git会提示“untracked working tree files”会“overwritten by checkout”。造成这种情况的原因有很多。不过通常来说，我们可以使用如下命令来保持工作树的整洁，从而防止这种情况的发生： $ git clean -f # remove untracked files $ git clean -fd # remove untracked files/directories $ git clean -nfd # list all files/directories that would be removed 8、git tag 查看标签（用来标记标志性的稳定版本信息） $ git tag -l &apos;[expression]&apos; 查看那符合正则表达式的 $ git tag -a &lt;tag name&gt; -m &lt;comment&gt; 添加带注释的标签 $ git tag -a &lt;tag name&gt; &lt;md5&gt; 对某个版本打标签 $ git tag [tag name] 如果没有标签名，则为查看所有标签。带标签名则为新建标签 Ps：Git命令速查表 1、常用的Git命令 命令 简要说明 git add 添加至暂存区 git add–interactive 交互式添加 git apply 应用补丁 git am 应用邮件格式补丁 git annotate 同义词，等同于 git blame git archive 文件归档打包 git bisect 二分查找 git blame 文件逐行追溯 git branch 分支管理 git cat-file 版本库对象研究工具 git checkout 检出到工作区、切换或创建分支 git cherry-pick 提交拣选 git citool 图形化提交，相当于 git gui 命令 git clean 清除工作区未跟踪文件 git clone 克隆版本库 git commit 提交 git config 查询和修改配置 git describe 通过里程碑直观地显示提交ID git diff 差异比较 git difftool 调用图形化差异比较工具 git fetch 获取远程版本库的提交 git format-patch 创建邮件格式的补丁文件。参见 git am 命令 git grep 文件内容搜索定位工具 git gui 基于Tcl/Tk的图形化工具，侧重提交等操作 git help 帮助 git init 版本库初始化 git init-db* 同义词，等同于 git init git log 显示提交日志 git merge 分支合并 git mergetool 图形化冲突解决 git mv 重命名 git pull 拉回远程版本库的提交 git push 推送至远程版本库 git reBase 分支变基 git rebase–interactive 交互式分支变基 git reflog 分支等引用变更记录管理 git remote 远程版本库管理 git repo-config* 同义词，等同于 git config git reset 重置改变分支“游标”指向 git rev-parse 将各种引用表示法转换为哈希值等 git revert 反转提交 git rm 删除文件 git show 显示各种类型的对象 git stage* 同义词，等同于 git add git stash 保存和恢复进度 git status 显示工作区文件状态 git tag 里程碑管理 2、对象库操作相关命令 命令 简要说明 git commit-tree 从树对象创建提交 git hash-object 从标准输入或文件计算哈希值或创建对象 git ls-files 显示工作区和暂存区文件 git ls-tree 显示树对象包含的文件 git mktag 读取标准输入创建一个里程碑对象 git mktree 读取标准输入创建一个树对象 git read-tree 读取树对象到暂存区 git update-index 工作区内容注册到暂存区及暂存区管理 git unpack-file 创建临时文件包含指定 blob 的内容 git write-tree 从暂存区创建一个树对象 3、引用操作相关命令 命令 简要说明 git check-ref-format 检查引用名称是否符合规范 git for-each-ref 引用迭代器，用于shell编程 git ls-remote 显示远程版本库的引用 git name-rev 将提交ID显示为友好名称 git peek-remote* 过时命令，请使用 git ls-remote git rev-list 显示版本范围 git show-branch 显示分支列表及拓扑关系 git show-ref 显示本地引用 git symbolic-ref 显示或者设置符号引用 git update-ref 更新引用的指向 git verify-tag 校验 GPG 签名的Tag 4、版本库管理相关命令 命令 简要说明 git count-objects 显示松散对象的数量和磁盘占用 git filter-branch 版本库重构 git fsck 对象库完整性检查 git fsck-objects* 同义词，等同于 git fsck git gc 版本库存储优化 git index-pack 从打包文件创建对应的索引文件 git lost-found* 过时，请使用 git fsck –lost-found 命令 git pack-objects 从标准输入读入对象ID，打包到文件 git pack-redundant 查找多余的 pack 文件 git pack-refs 将引用打包到 .git/packed-refs 文件中 git prune 从对象库删除过期对象 git prune-packed 将已经打包的松散对象删除 git relink 为本地版本库中相同的对象建立硬连接 git repack 将版本库未打包的松散对象打包 git show-index 读取包的索引文件，显示打包文件中的内容 git unpack-objects 从打包文件释放文件 git verify-pack 校验对象库打包文件 5、数据传输相关命令 命令 简要说明 git fetch-pack 执行 git fetch 或 git pull 命令时在本地执行此命令，用于从其他版本库获取缺失的对象 git receive-pack 执行 git push 命令时在远程执行的命令，用于接受推送的数据 git send-pack 执行 git push 命令时在本地执行的命令，用于向其他版本库推送数据 git upload-archive 执行 git archive –remote 命令基于远程版本库创建归档时，远程版本库执行此命令传送归档 git upload-pack 执行 git fetch 或 git pull 命令时在远程执行此命令，将对象打包、上传 6、邮件相关命令 命令 简要说明 git imap-send 将补丁通过 IMAP 发送 git mailinfo 从邮件导出提交说明和补丁 git mailsplit 将 mbox 或 Maildir 格式邮箱中邮件逐一提取为文件 git request-pull 创建包含提交间差异和执行PULL操作地址的信息 git send-email 发送邮件 7、协议相关命令 命令 简要说明 git daemon 实现Git协议 git http-backend 实现HTTP协议的CGI程序，支持智能HTTP协议 git instaweb 即时启动浏览器通过 gitweb 浏览当前版本库 git shell 受限制的shell，提供仅执行Git命令的SSH访问 git update-server-info 更新哑协议需要的辅助文件 git http-fetch 通过HTTP协议获取版本库 git http-push 通过HTTP/DAV协议推送 git remote-ext 由Git命令调用，通过外部命令提供扩展协议支持 git remote-fd 由Git命令调用，使用文件描述符作为协议接口 git remote-ftp 由Git命令调用，提供对FTP协议的支持 git remote-ftps 由Git命令调用，提供对FTPS协议的支持 git remote-http 由Git命令调用，提供对HTTP协议的支持 git remote-https 由Git命令调用，提供对HTTPS协议的支持 git remote-testgit 协议扩展示例脚本 8、版本库转换和交互相关命令 命令 简要说明 git archimport 导入Arch版本库到Git git bundle 提交打包和解包，以便在不同版本库间传递 git cvsexportcommit 将Git的一个提交作为一个CVS检出 git cvsimport 导入CVS版本库到Git。或者使用 cvs2git git cvsserver Git的CVS协议模拟器，可供CVS命令访问Git版本库 git fast-export 将提交导出为 git-fast-import 格式 git fast-import 其他版本库迁移至Git的通用工具 git svn Git 作为前端操作 Subversion 9、合并相关的辅助命令 命令 简要说明 git merge-base 供其他脚本调用，找到两个或多个提交最近的共同祖先 git merge-file 针对文件的两个不同版本执行三向文件合并 git merge-index 对index中的冲突文件调用指定的冲突解决工具 git merge-octopus 合并两个以上分支。参见 git merge 的octopus合并策略 git merge-one-file 由 git merge-index 调用的标准辅助程序 git merge-ours 合并使用本地版本，抛弃他人版本。参见 git merge 的ours合并策略 git merge-recursive 针对两个分支的三向合并。参见 git merge 的recursive合并策略 git merge-resolve 针对两个分支的三向合并。参见 git merge 的resolve合并策略 git merge-subtree 子树合并。参见 git merge 的 subtree 合并策略 git merge-tree 显式三向合并结果，不改变暂存区 git fmt-merge-msg 供执行合并操作的脚本调用，用于创建一个合并提交说明 git rerere 重用所记录的冲突解决方案 10、 杂项 命令 简要说明 git bisect–helper 由 git bisect 命令调用，确认二分查找进度 git check-attr 显示某个文件是否设置了某个属性 git checkout-index 从暂存区拷贝文件至工作区 git cherry 查找没有合并到上游的提交 git diff-files 比较暂存区和工作区，相当于 git diff –raw git diff-index 比较暂存区和版本库，相当于 git diff –cached –raw git diff-tree 比较两个树对象，相当于 git diff –raw A B git difftool–helper 由 git difftool 命令调用，默认要使用的差异比较工具 git get-tar-commit-id 从 git archive 创建的 tar 包中提取提交ID git gui–askpass 命令 git gui 的获取用户口令输入界面 git notes 提交评论管理 git patch-id 补丁过滤行号和空白字符后生成补丁唯一ID git quiltimport 将Quilt补丁列表应用到当前分支 git replace 提交替换 git shortlog 对 git log 的汇总输出，适合于产品发布说明 git stripspace 删除空行，供其他脚本调用 git submodule 子模组管理 git tar-tree 过时命令，请使用 git archive git var 显示 Git 环境变量 git web–browse 启动浏览器以查看目录或文件 git whatchanged 显示提交历史及每次提交的改动 git-mergetool–lib 包含于其他脚本中，提供合并/差异比较工具的选择和执行 git-parse-remote 包含于其他脚本中，提供操作远程版本库的函数 git-sh-setup 包含于其他脚本中，提供 shell 编程的函数库 Ps：参考文章 Git 远程操作的正确姿势 深入理解学习Git工作流","categories":[{"name":"版本控制","slug":"版本控制","permalink":"https://sword30021.github.io/blog/categories/版本控制/"},{"name":"git","slug":"版本控制/git","permalink":"https://sword30021.github.io/blog/categories/版本控制/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://sword30021.github.io/blog/tags/git/"}],"keywords":[{"name":"版本控制","slug":"版本控制","permalink":"https://sword30021.github.io/blog/categories/版本控制/"},{"name":"git","slug":"版本控制/git","permalink":"https://sword30021.github.io/blog/categories/版本控制/git/"}]},{"title":"svn-命令行常用命令集锦(持续更新)","slug":"svn-命令行常用命令集锦-持续更新","date":"2016-09-26T09:59:03.000Z","updated":"2016-09-26T10:05:35.000Z","comments":true,"path":"2016/09/26/svn-命令行常用命令集锦-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/26/svn-命令行常用命令集锦-持续更新/","excerpt":"","text":"1、将文件checkout到本地目录 svn checkout path（path是服务器上的目录）简写：svn co 2、往版本库中添加新的文件 svn add file（file是文件名称）svn add *.java(添加当前目录下所有的java文件) 3、将改动的文件提交到版本库 svn commit -m “your content”简写：svn ci 4、加锁/解锁 svn lock -m “your content” [–force] PATH 5、更新到某个版本 svn update -r m path（m是要更新的版本号）svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。简写：svn up 6、查看文件或者目录状态 svn status path目录下的文件和子目录的状态，正常状态不显示状态说明：?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定 svn status -v path显示文件和子目录状态，第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，因为svn在本地的.svn中保留了本地版本的原始拷贝。 7、删除文件 svn delete path -m “your content”简写：svn (del, remove, rm) 8、查看日志 svn log path 9、查看文件详细信息 svn info path 例如：svn info test.php 10、比较差异 svn diff path(将修改的文件与基础版本比较)svn diff -r m:n path(对版本m和版本n比较差异)简写：svn di 11、将两个版本之间的差异合并到当前文件 svn merge -r m:n path 12、SVN 帮助 svn helpsvn help ci 13、代码库URL变更 svn switch (sw): 更新工作副本至不同的URL。用法： switch URL [PATH]更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。 switch –relocate FROM TO [PATH…]改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。 14、解决冲突 svn resolved: 移除工作副本的目录或文件的“冲突”状态。用法: resolved PATH…注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。","categories":[{"name":"版本控制","slug":"版本控制","permalink":"https://sword30021.github.io/blog/categories/版本控制/"},{"name":"svn","slug":"版本控制/svn","permalink":"https://sword30021.github.io/blog/categories/版本控制/svn/"}],"tags":[{"name":"svn","slug":"svn","permalink":"https://sword30021.github.io/blog/tags/svn/"}],"keywords":[{"name":"版本控制","slug":"版本控制","permalink":"https://sword30021.github.io/blog/categories/版本控制/"},{"name":"svn","slug":"版本控制/svn","permalink":"https://sword30021.github.io/blog/categories/版本控制/svn/"}]},{"title":"css-元素垂直居中的6种方法","slug":"css-元素垂直居中的6种方法","date":"2016-09-26T08:56:03.000Z","updated":"2016-09-26T09:20:57.000Z","comments":true,"path":"2016/09/26/css-元素垂直居中的6种方法/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/26/css-元素垂直居中的6种方法/","excerpt":"","text":"利用CSS进行元素的水平居中，比较简单，行级元素设置其父元素的text-align center，块级元素设置其本身的left 和 right margins为auto即可。本文收集了六种利用css进行元素的垂直居中的方法，每一种适用于不同的情况，在实际的使用过程中选择某一种方法即可。 1、Line-Height Method适用：单行文本垂直居中 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt;Text here&lt;/div&gt; &lt;/div&gt; css代码： #child { line-height: 200px; } 垂直居中一张图片 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;img src=&quot;image.png&quot; alt=&quot;&quot; /&gt; &lt;/div&gt; css代码： #parent { line-height: 200px; } #parent img { vertical-align: middle; } 2、CSS Table Method适用：通用 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt;Content here&lt;/div&gt; &lt;/div&gt; css代码： #parent { display: table; } #child { display: table-cell; vertical-align: middle; } 低版本 IE fix bug： #child { display: inline-block; } 3、Absolute Positioning and Negative Margin适用：块级元素 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt;Content here&lt;/div&gt; &lt;/div&gt; css代码： #parent { position: relative; } #child { position: absolute; top: 50%; left: 50%; height: 30%; width: 50%; margin: -15% 0 0 -25%; } 4、Absolute Positioning and Stretching适用：通用，但在IE版本低于7时不能正常工作 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt;Content here&lt;/div&gt; &lt;/div&gt; css代码： #parent { position: relative; } #child { position: absolute; top: 0; bottom: 0; left: 0; right: 0; width: 50%; height: 30%; margin: auto; } 5、Equal Top and Bottom Padding适用：通用 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt;Content here&lt;/div&gt; &lt;/div&gt; css代码： #parent { padding: 5% 0; } #child { padding: 10% 0; } 6、Floater Div适用：通用 html代码： &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;floater&quot;&gt; &lt;/div&gt; &lt;div id=&quot;child&quot;&gt;Content here&lt;/div&gt; &lt;/div&gt; css代码： #parent { height: 250px; } #floater { float: left; height: 50%; width: 100%; margin-bottom: -50px; } #child { clear: both; height: 100px; } 以上就是六种方法，可以在实际的使用过程中合理选择。","categories":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发知识","slug":"Web/开发知识","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/"},{"name":"Css","slug":"Web/开发知识/Css","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/Css/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/tags/Web/"},{"name":"Css","slug":"Css","permalink":"https://sword30021.github.io/blog/tags/Css/"}],"keywords":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发知识","slug":"Web/开发知识","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/"},{"name":"Css","slug":"Web/开发知识/Css","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/Css/"}]},{"title":"Mac上安装oh-my-zsh","slug":"Mac上安装oh-my-zsh","date":"2016-09-22T08:43:20.000Z","updated":"2016-09-22T08:44:00.000Z","comments":true,"path":"2016/09/22/Mac上安装oh-my-zsh/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Mac上安装oh-my-zsh/","excerpt":"","text":"GitHub地址 https://github.com/robbyrussell/oh-my-zsh step1:克隆项目到本地（Mac默认已经安装了git） git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh step2:创建一个zsh的配置文件 cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc step3:设置zsh为默认的shell chsh -s /bin/zsh step4:重启生效 打开一个新的终端窗口，大功告成。","categories":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/tags/Mac/"}],"keywords":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}]},{"title":"Mac上设置Java环境变量","slug":"Mac上设置Java环境变量","date":"2016-09-22T08:40:09.000Z","updated":"2016-09-22T08:45:16.000Z","comments":true,"path":"2016/09/22/Mac上设置Java环境变量/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Mac上设置Java环境变量/","excerpt":"","text":"说明 如果是用bash，修改~/.bash_profile或~/.profile。两者的区别：.bash_profile是用户级别的，更新系统或切换用户就会失效。.profile是系统级别的，永远都有效。2.如果是用zsh，修改~/.zshrc。 step1:检查是否安装了jdk(Mac系统默认已安装) 1.查看java的安装路径which java2.查看java版本java -version step2:设置环境变量 以bash为例： ## edit .bash_profile to set java_home variable vim ~/.bash_profile ## add the following line into the file export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar ## let the configuration in .bash_profile take effect source .bash_profile 以zsh为例： ## check all the available jdk /usr/libexec/java_home -V ## check the top jdk /usr/libexec/java_home ## check some jdk (eg. version 1.7) /usr/libexec/java_home -v 1.7 ## edit .zshrc to set java_home variable vim ~/.zshrc ## add the following line into the file export JAVA_HOME=$(/usr/libexec/java_home) ## you can also use the following line to set the variable, which is not recommended, only for older mac os. ## export JAVA_HOME=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ##let the configuration in .zshrc take effect source ~/.zshrc ## check if configure succeed echo $JAVA_HOME","categories":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/tags/Mac/"}],"keywords":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}]},{"title":"Zsh使用","slug":"Zsh使用","date":"2016-09-22T08:37:23.000Z","updated":"2016-09-22T08:45:28.000Z","comments":true,"path":"2016/09/22/Zsh使用/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Zsh使用/","excerpt":"","text":"使用默认指令列模式(bash shell)的管理员可能想仔细看看zshell或是zsh。由于它于bash相似，功能又有所加强，zsh在Linux社区获得了关注。那么zsh有什么不同之处呢?首先，zsh在感觉和功能上都和bash相似。但是一些增强功能让zsh变成一个有趣的选择。Zsh增强功能：标签完成和拼写错误修正 用过bash标签完成的管理员会发现zsh中的增加功能令人印象深刻。这些功能包括菜单中现有的自动完成命令选项，该菜单可以通过使用箭头键滚动。举例来说，键入以下命令将提供可能命令行标记的列表：$ ls -或是$ rm -选择要取消的特定程序，程序列表就和取消命令一起可用了。另一个功能在内置页面程序中，它提供到less命令的快捷方式。要访问它，输入：$ 这和在命令行上运行more文件名一样。对笨拙的打字员来说，拼写错误修正功能可用了。例如，如果你输入了一条错误命令，zsh会提示修正：$ llszsh: 要将 ‘lls’修改为 ‘ls’ [nyae]吗?要修改它，输入y，命令就更正为ls，接着命令就准备运行了。其它选项也很实用。输入n拒绝命令修正，输入a中断命令，输入e跳转到命令行进行编辑。这个自动修正功能也能用于命令行标记和文件名，包括修改无效Git分支名称一类的机密事务。开始使用zsh 为了快速地开始使用zsh，可利用Robby Russell收集的zsh主题、功能和工具，它们被预先打包成“Oh My Zsh”。$ wget –no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh还可以手工安装这个工具包。如果您在运行另一种 shell，只是想试试 Z shell，那么手工安装可能会更好。请使用 Git 复制这个工具包，然后运行 zsh：$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc$ zshOMZ! 的默认主题称为 “robbyrussell”，由 OMZ! 的管理者命名。您可以将它更改为 ~/.oh-my-zsh/themes 中列出的任何主题。更改主题的方法是，打开 ~/.zshrc 文件，将 ZSH_THEME 变量设置为主题文件的基本名称。例如，要想使用 cloud.zsh-theme，则应该设置 ZSH_THEME=cloud。您可能会注意到，许多主题的输出状态信息显示在提示符中和提示符的最右边。 例如，Clean 主题在最右边输出当前时间。与硬件屏幕不同，屏幕模拟器的底部通常没有状态条，但是可以使用提示符右边的区域提供动态反馈。还记得可以在提示符中使用 \\e[ 编码设置颜色吗？有一组这样的 “转义” 可以将光标移动到窗口中的不同位置。另外，目前的 UNIX 系统并没有使用神秘的符号和数字，而是使用 tput 按名称或用途查找和产生转义。Z shell 使用这种方法提供 RPS1 和 RPS2，它们分别表示初始行和后续行右边的提示符。除了通过主题控制颜色和提示符之外，OMZ! 还提供了一些插件，这些插件将同类的函数和特性集中在一起。例如，如果您使用 Git 进行源代码控制，可以启用 Git OMZ! 插件，它会在提示符中增加 Git 状态。请打开 ~/.zshrc 文件，然后编辑插件行，在其中包含 git&gt;。现在，当切换到一个 Git 存储库时，提示符会反映该状态。(极限shell改造)“Oh My Zsh”知识库包含一个主题和功能集合用于现有zsh环境的建立和改变。它也能和卸载脚本一起用来简化移除：$ uninstall_oh_my_zsh与zsh shell一起供给的还有一些很好的文档和zsh参考卡。GitHub等网站上的在线资源是.zshrc文件的例子，它相当于zsh版的.bashrc文件，这些资源同时也提供如何定制zsh的示例或是示范加强命令行经验的炫酷技巧。一些zsh功能可和bash一起用，但在bash上设置、配置更加复杂，这也解释了为什么人们有多页.bashrc文件。如果是Shell的高度使用者，zsh会是吸引你用来取代bash的选择。它的使用快速且简单，而它的一些重要功能也让与shell的互动更有趣。非常好用的特性 加强的 alias，在bash里如果你用 alias，新名不用有补全功能了，所以alias功能有限，几次想用它简化软件包管理都放弃了。而zsh里的alias生成的新名同样支持选项补全，就样就可以很放心地 alias ai=”sudo apt-get install” 等了，再也不用频繁输入长命令了。 zsh可以方便里使用快捷键，例如可以实现按两下[esc]，在命令之前加加sudo,按[esc][h]，显示man，等等。 zsh可以对单个命令的补全进行设置，使常用命令高效。例如 kill [tab] 就可以选择所有进程。 zsh的命令提示符设置更灵活。 zsh对目录的操作特别灵活。 zsh对重定向，管道等提供更多功能。配置 #color{{{ autoload colors zsh/terminfo if [[ \"$terminfo[colors]\" -ge 8 ]]; then colors fi for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}' eval $color='%{$fg[${(L)color}]%}' (( count = $count + 1 )) done FINISH=\"%{$terminfo[sgr0]%}\" #}}} #命令提示符 {{{ precmd () { local count_db_wth_char=$}} #标题栏、任务栏样式{{{ case $TERM in (*xterm*|*rxvt*|(dt|k|E)term) preexec () { print -Pn \"\\e]0;%n@%M//%/\\ $1\\a\" } ;; esac #}}} #关于历史纪录的配置 {{{ #历史纪录条目数量 export HISTSIZE=1000 #注销后保存的历史纪录条目数量 export SAVEHIST=1000 #历史纪录文件 export HISTFILE=~/.zhistory #以附加的方式写入历史纪录 setopt INC_APPEND_HISTORY #如果连续输入的命令相同，历史纪录中只保留一个 setopt HIST_IGNORE_DUPS #为历史纪录中的命令添加时间戳 setopt EXTENDED_HISTORY #启用 cd 命令的历史纪录，cd -[TAB]进入历史路径 setopt AUTO_PUSHD #相同的历史路径只保留一个 setopt PUSHD_IGNORE_DUPS #在命令前添加空格，不将此命令添加到纪录文件中 #setopt HIST_IGNORE_SPACE #}}} #杂项 {{{ #允许在交互模式中使用注释 例如： #cmd #这是注释 setopt INTERACTIVE_COMMENTS #启用自动 cd，输入目录名回车进入目录 #稍微有点混乱，不如 cd 补全实用 #setopt AUTO_CD #扩展路径 #/v/c/p/p => /var/cache/pacman/pkg setopt complete_in_word #禁用 core dumps limit coredumpsize 0 #Emacs风格 键绑定 bindkey -e #设置 [DEL]键 为向后删除 bindkey \"\\e[3~\" delete-char #以下字符视为单词的一部分 WORDCHARS='*?_-[]~=&;!#$%^(){}' #}}} #自动补全功能 {{{ setopt AUTO_LIST setopt AUTO_MENU #开启此选项，补全时会直接选中菜单项 #setopt MENU_COMPLETE autoload -U compinit compinit #自动补全缓存 #zstyle ':completion::complete:*' use-cache on #zstyle ':completion::complete:*' cache-path .zcache #zstyle ':completion:*:cd:*' ignore-parents parent pwd #自动补全选项 zstyle ':completion:*' verbose yes zstyle ':completion:*' menu select zstyle ':completion:*:*:default' force-list always zstyle ':completion:*' select-prompt '%SSelect: lines: %L matches: %M [%p]' zstyle ':completion:*:match:*' original only zstyle ':completion::prefix-1:*' completer _complete zstyle ':completion:predict:*' completer _complete zstyle ':completion:incremental:*' completer _complete _correct zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate #路径补全 zstyle ':completion:*' expand 'yes' zstyle ':completion:*' squeeze-slashes 'yes' zstyle ':completion::complete:*' '\\\\' #彩色补全菜单 eval $(dircolors -b) export ZLSCOLORS=\"${LS_COLORS}\" zmodload zsh/complist zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0- 9]#)*=0=01;31' #修正大小写 zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' #错误校正 zstyle ':completion:*' completer _complete _match _approximate zstyle ':completion:*:match:*' original only zstyle ':completion:*:approximate:*' max-errors 1 numeric #kill 命令补全 compdef pkill=killall zstyle ':completion:*:*:kill:*' menu yes select zstyle ':completion:*:*:*:*:processes' force-list always zstyle ':completion:*:processes' command 'ps -au$USER' #补全类型提示分组 zstyle ':completion:*:matches' group 'yes' zstyle ':completion:*' group-name '' zstyle ':completion:*:options' description 'yes' zstyle ':completion:*:options' auto-description '%d' zstyle ':completion:*:descriptions' format $'\\e[01;33m -- %d --\\e[0m' zstyle ':completion:*:messages' format $'\\e[01;35m -- %d --\\e[0m' zstyle ':completion:*:warnings' format $'\\e[01;31m -- No Matches Found --\\e[0m' zstyle ':completion:*:corrections' format $'\\e[01;32m -- %d (errors: %e) --\\e[0m' # cd ~ 补全顺序 zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path- directories' 'users' 'expand' #}}} ##行编辑高亮模式 {{{ # Ctrl+@ 设置标记，标记和光标点之间为 region zle_highlight=(region:bg=magenta #选中区域 special:bold #特殊字符 isearch:underline)#搜索时使用的关键字 #}}} ##空行(光标在行首)补全 &quot;cd &quot; {{{ user-complete(){ case $BUFFER in \"\" ) # 空行填入 \"cd \" BUFFER=\"cd \" zle end-of-line zle expand-or-complete ;; \"cd \" ) # TAB + 空格 替换为 \"cd ~\" BUFFER=\"cd ~\" zle end-of-line zle expand-or-complete ;; \" \" ) BUFFER=\"!?\" zle end-of-line ;; \"cd --\" ) # \"cd --\" 替换为 \"cd +\" BUFFER=\"cd +\" zle end-of-line zle expand-or-complete ;; \"cd +-\" ) # \"cd +-\" 替换为 \"cd -\" BUFFER=\"cd -\" zle end-of-line zle expand-or-complete ;; * ) zle expand-or-complete ;; esac } zle -N user-complete bindkey \"\\t\" user-complete #显示 path-directories ，避免候选项唯一时直接选中 cdpath=\"/home\" #}}} ##在命令前插入 sudo {{{ #定义功能 sudo-command-line() { [[ -z $BUFFER ]] && zle up-history [[ $BUFFER != sudo\\ * ]] && BUFFER=\"sudo $BUFFER\" zle end-of-line #光标移动到行末 } zle -N sudo-command-line #定义快捷键为： [Esc] [Esc] bindkey \"\\e\\e\" sudo-command-line #}}} #命令别名 {{{ alias -g ls='ls -F --color=auto' alias -g ll='ls -l' alias -g la='ls -a' alias -g l='ls' alias -g grep='grep --color=auto' #alias -g history='history -fi' alias -g ai='sudo apt-get install' alias -g aar='sudo apt-get autoremove' alias -g ap='sudo apt-get purge' alias -g aud='sudo apt-get update' alias -g aug='sudo apt-get upgrade' alias -g adu='sudo apt-get dist-upgrade' #[Esc][h] man 当前命令时，显示简短说明 alias run-help >&/dev/null && unalias run-help autoload run-help #历史命令 top10 #alias top10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10' #}}} #路径别名 {{{ #进入相应的路径时只要 cd ~xxx hash -d HIST=\"$HISTDIR\" #}}} #{{{自定义补全 #补全 ping zstyle ':completion:*:ping:*' hosts g.cn facebook.com #补全 ssh scp sftp 等 my_accounts=( {ly50247,osily,lg50247,root}@{192.168.1.1,192.168.0.1} osily@localhost ) zstyle ':completion:*:my-accounts' users-hosts $my_accounts #def pacman-color completion as pacman #compdef pacman-color=pacman #}}} #{{{ F1 计算器 arith-eval-echo() { LBUFFER=\"${LBUFFER}echo \\$(( \" RBUFFER=\" ))$RBUFFER\" } zle -N arith-eval-echo bindkey \"^[[11~\" arith-eval-echo #}}} ####{{{ #function timeconv { date -d @$1 +\"%Y-%m-%d %T\" } # }}} ####{{{ function command_not_found_handler() { python /usr/lib/command-not-found $1 return 0 } # }}} ## END OF FILE ################################################################# # vim:filetype=zsh foldmethod=marker autoindent expandtab shiftwidth=4 export http_proxy=http://192.168.187.145:80 #export JAVA_HOME=&quot;/usr/lib/jvm/java-6-sun&quot; #export JRE_HOME=&quot;/usr/lib/jvm/java-6-sun/jre&quot; export PATH=&quot;$PATH:/home/osily/program/bin&quot; #exportCLASSPATH=&quot;$CLASSPATH:.:$JAVA_HOME/lib:$JAVA_HOME/jre/li b:/home/osily/program/tomcat620/lib:/home/osily/program/tomcat620/lib/servlet-api.jar&quot; alias upg=&quot;sudo apt-get update &amp;&amp; sudo apt-get upgrade&quot; alias qq=&quot;nohup google-chrome --no-proxy-server -- app=http://web.qq.com &gt;/dev/null 2&gt;/dev/null &amp;&quot; #alias tomstart=&quot;sudo ~/program/tomcat620/bin/startup.sh&quot; #alias tomshut=&quot;sudo ~/program/tomcat620/bin/shutdown.sh&quot; #alias js2=&quot;rhino&quot; alias gmusic=&quot;google-chrome --no-proxy-server -- app=http://g.top100.cn/12174704/html/player.html#loaded&quot; alias apa=&quot;dpkg -l |grep ^rc|awk &apos;{print $2}&apos; |sudo xargs dpkg -P&quot;","categories":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/tags/Mac/"}],"keywords":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}]},{"title":"Mac上如何完全删除node.js","slug":"Mac上如何完全删除node-js","date":"2016-09-22T08:35:47.000Z","updated":"2016-09-22T08:36:56.000Z","comments":true,"path":"2016/09/22/Mac上如何完全删除node-js/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Mac上如何完全删除node-js/","excerpt":"","text":"删除/usr/local/lib中的所有node和node_modules 删除/usr/local/lib中的所有node和node_modules的文件夹 如果是从brew安装的, 运行brew uninstall node 检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules 在/usr/local/bin中, 删除所有node的可执行文件 最后运行以下代码: sudo rm /usr/local/bin/npm sudo rm /usr/local/share/man/man1/node.1 sudo rm /usr/local/lib/dtrace/node.d sudo rm -rf ~/.npm sudo rm -rf ~/.node-gyp sudo rm /opt/local/bin/node sudo rm /opt/local/include/node sudo rm -rf /opt/local/lib/node_modules","categories":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/tags/Mac/"}],"keywords":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}]},{"title":"Mac上安装Homebrew及常用命令","slug":"Mac上安装Homebrew及常用命令","date":"2016-09-22T08:33:08.000Z","updated":"2016-09-28T08:08:37.000Z","comments":true,"path":"2016/09/22/Mac上安装Homebrew及常用命令/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Mac上安装Homebrew及常用命令/","excerpt":"","text":"Homebrew简称brew 。 是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 使用命令，非常方便。 安装Homebrew 在Mac中打开Termal: 输入命令：ruby -e “$(curl –insecure -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)” 使用brew安装软件 比如安装git： brew install git 使用brew卸载软件 brew uninstall git 使用brew查询软件 brew search /gi*/ /gi*/是个正在表达式。 其他brew命令 brew list：列出已安装的软件 brew update：更新brew brew home：用浏览器打开brew的官方网站 brew info：显示软件信息 brew deps：显示包依赖","categories":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/tags/Mac/"}],"keywords":[{"name":"Mac","slug":"Mac","permalink":"https://sword30021.github.io/blog/categories/Mac/"},{"name":"Mac使用","slug":"Mac/Mac使用","permalink":"https://sword30021.github.io/blog/categories/Mac/Mac使用/"}]},{"title":"常用Atom插件列表（持续更新...）","slug":"常用Atom插件列表（持续更新-）","date":"2016-09-22T08:26:10.000Z","updated":"2016-09-29T14:56:50.000Z","comments":true,"path":"2016/09/22/常用Atom插件列表（持续更新-）/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/常用Atom插件列表（持续更新-）/","excerpt":"","text":"1、simplified-chinese-menu 2、tree-view-finder 3、minimap 4、linter和linter-jshint 5、linter-js-standard 6、git-plus 7、file-types和file-types-icon 8、emmet 9、autoclose-html 10、atom-ternjs 11、atom-html-preview 12、atom-bootstrap3 13、Remote-FTP 14、autocomplete-paths 15、atom-beautify 16、jquery-snippets 17、autoprefixer 18、color-picker 19、activate-power-mode 1、simplified-chinese-menu Atom的简体中文语言包，完整汉化，兼容所有已发布的版本Atom。 2、tree-view-finder 左边菜单栏显示方式，类似Mac OS下的finder。 3、minimap 类似sublim text右边的代码缩略图。 4、linter和linter-jshint 该插件是用jshint来检查代码，想必大家都听说过jshint代码检查工具，它有一个配置文件.jshintrc，这个文件告诉jshint执行的检查规则。通过jshint能发现代码中存在的问题，可以及时避免bug的发生。linter-jshint插件基于atom规则来使用jshint，该插件可以在项目根目录下新建一个.jshintrc来告诉检查规则，也可以不用创建此文件来进行代码检查。注意：linter-jshint是依赖linter插件来使用的，也就是说必须先安装linter插件；因为linter是一个粗糙的检查，有很多针对专门项的代码检查，如linter-csslint、linter-php等等 5、linter-js-standard 用来使javascript代码格式化。 6、git-plus 提供git版本控制操作的命令，个人感觉不是很好用，还是terminal比较习惯。 7、file-types和file-types-icon file-types用来区分文件类型的，file-types-icon用来给不同的问题类型添加不同的图标。 8、emmet 这款插件是用来支持zend-coding，Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度 9、autoclose-html html标签自动比较。 10、atom-ternjs 该插件能对一个对象中拥有的对外提供的属性和方法都能通过suggest的形式提示出来，能对一个对象对外提供的接口有一个选择过程，可以理解为js代码自动提示。 11、atom-html-preview html页面预览。 12、atom-bootstrap3 bootstrap3代码提示插件。 13、Remote-FTP ftp管理工具，命令和图形化界面都支持。PS：具体使用方式，参考官方说明或留言。 14、autocomplete-paths 文件路径自动提示。 15、atom-beautify 代码格式化。 16、jquery-snippets jquery代码提示，安装完之后要重新启动Atom。 17、autoprefixer 浏览器兼容。 18、color-picker 取色器。 19、activate-power-mode 代码在跳舞","categories":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发工具","slug":"Web/开发工具","permalink":"https://sword30021.github.io/blog/categories/Web/开发工具/"},{"name":"Atom","slug":"Web/开发工具/Atom","permalink":"https://sword30021.github.io/blog/categories/Web/开发工具/Atom/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/tags/Web/"},{"name":"Atom","slug":"Atom","permalink":"https://sword30021.github.io/blog/tags/Atom/"}],"keywords":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发工具","slug":"Web/开发工具","permalink":"https://sword30021.github.io/blog/categories/Web/开发工具/"},{"name":"Atom","slug":"Web/开发工具/Atom","permalink":"https://sword30021.github.io/blog/categories/Web/开发工具/Atom/"}]},{"title":"css-如何规定某一元素高度等于其宽度","slug":"css-如何规定某一元素高度等于其宽度","date":"2016-09-22T08:19:48.000Z","updated":"2016-09-22T08:22:48.000Z","comments":true,"path":"2016/09/22/css-如何规定某一元素高度等于其宽度/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/css-如何规定某一元素高度等于其宽度/","excerpt":"","text":"使用js实现 &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function(){ $(&apos;#box1&apos;).css(&apos;height&apos;,$(&apos;#box1&apos;).css(&apos;width&apos;)); }) &lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; #box{ width: 900px; height: 400px; border:1px solid red; } #box1{ width:50%; border:1px solid green; } &lt;/style&gt; &lt;body&gt; &lt;div id=&apos;box&apos;&gt; &lt;div id=&apos;box1&apos;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; Ps:如果还有其他实现方式，请留言，谢谢。","categories":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发知识","slug":"Web/开发知识","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/"},{"name":"Css","slug":"Web/开发知识/Css","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/Css/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/tags/Web/"},{"name":"Css","slug":"Css","permalink":"https://sword30021.github.io/blog/tags/Css/"}],"keywords":[{"name":"Web","slug":"Web","permalink":"https://sword30021.github.io/blog/categories/Web/"},{"name":"开发知识","slug":"Web/开发知识","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/"},{"name":"Css","slug":"Web/开发知识/Css","permalink":"https://sword30021.github.io/blog/categories/Web/开发知识/Css/"}]},{"title":"Android Studio常用插件列表(持续更新...)","slug":"Android-Studio常用插件列表-持续更新","date":"2016-09-22T08:03:39.000Z","updated":"2016-10-05T03:39:14.000Z","comments":true,"path":"2016/09/22/Android-Studio常用插件列表-持续更新/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Android-Studio常用插件列表-持续更新/","excerpt":"","text":"引言 工欲善其事，必先利其器！作为一名苦逼的程序员，提高开发效率，可以使用节约的时间做其他事情。 1、.ignore 在Git 中想要过滤掉一些不想提交的文件，可以把相应的文件添加到.gitignore 中，而.gitignore 这个Android Studio 插件根据不同的语言来选择模板，就不用自己在费事添加一些文件了，而且还有自动补全功能，过滤文件再也不要复制文件名了。没有ignore file 可以右键项目New 出自动生成上面模板的 ignore file，已有ignore file 的话可以右键文件选择Add template…，也可以右键将向忽略的文件直接添加到ignore file 里。 2、Android ButterKnife Zelezny ButterKnife是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及 setOnClickListener代码，可视化一键生成。 3、Android Parcelable code generator 快速实现Parcelable接口的插件。 4、Android Postfix Completion 可根据后缀快速完成代码。 5、Codota 该网站搜集了大量的代码，号称超过700W的代码实例。提供了chrome和as插件。 6、Dash Dash是一个API文档浏览器（ API Documentation Browser），以及代码片段管理工具（Code Snippet Manager）。安装此插件后，可以打开Dash客户端，如果Dash里多个API文档，默认打开Android。很多IDE都支持Dash，只要安装相应的插件即可。 7、DataBase Navigator 轻量级的，在Android Studio中使用的数据库可视化插件。_573.jpg) 8、GsonFormat GsonFormat是一个快速格式化json数据,自动生成实体类参数的插件。 9、Lifecycle Sorter 可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序。 10、Markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。 11、 Android Drawable Importer 为了适应所有Android屏幕的大小和密度，每个Android项目都会包含drawable文件夹。任何具备Android开发经验的开发人员都知道，为了支持所有的屏幕尺寸，你必须给每个屏幕类型导入不同的画板。Android Drawable Importer插件能让这项工作变得更容易。它可以减少导入缩放图像到Android项目所需的工作量。Android Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项。这个插件加速了开发人员的画板工作。 参考使用地址：http://blog.csdn.net/ziwang_/article/details/51713623 12、Material Design Icon Generator 一款帮助我们设置Material风格图标的插件 13、SelectorChapek for Android 根据资源自动生成相应的selector。 14、JavaDoc 添加注释，可自定义模板。 15、Android Holo Colors Generator 通过自定义Holo主题颜色生成对应的Drawable和布局文件 16、Android strings.xml tools 可以用来管理Android项目中的字符串资源。它提供了排序Android本地文件和添加缺少的字符串的基本操作。虽然这个插件是有限制的，但如果应用程序有大量的字符串资源，那这个插件就非常有用了。 17、lint-cleaner-plugin 删除未使用的资源,包括String字符串,颜色和尺寸。 这是一个Gradle插件，所以如何配置可以去github的源码上看。插件源码地址：https://github.com/marcoRS/lint-cleaner-plugin 18、 Material Theme UI This will add the Material Theme look to your IDE.","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发工具","slug":"Android/开发工具","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/"},{"name":"Android Studio","slug":"Android/开发工具/Android-Studio","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/Android-Studio/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_tools","slug":"Android-tools","permalink":"https://sword30021.github.io/blog/tags/Android-tools/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发工具","slug":"Android/开发工具","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/"},{"name":"Android Studio","slug":"Android/开发工具/Android-Studio","permalink":"https://sword30021.github.io/blog/categories/Android/开发工具/Android-Studio/"}]},{"title":"Android-使用Intent打开各种文件","slug":"Android-使用Intent打开各种文件","date":"2016-09-22T07:52:08.000Z","updated":"2016-10-05T07:08:59.000Z","comments":true,"path":"2016/09/22/Android-使用Intent打开各种文件/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Android-使用Intent打开各种文件/","excerpt":"","text":"1、打开Html文件 public static Intent getHtmlFileIntent( String param ) { Uri uri = Uri.parse(param ).buildUpon().encodedAuthority(&quot;com.android.htmlfileprovider&quot;).scheme(&quot;content&quot;).encodedPath(param ).build(); Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.setDataAndType(uri, &quot;text/html&quot;); return intent; } 2、打开图片文件 public static Intent getImageFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;image/*&quot;); return intent; } 3、打开pdf文件 public static Intent getPdfFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;application/pdf&quot;); return intent; } 4、打开txt文件 public static Intent getTextFileIntent( String paramString, boolean paramBoolean) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); if (paramBoolean) { Uri uri1 = Uri.parse(param ); intent.setDataAndType(uri1, &quot;text/plain&quot;); } while (true) { return intent; Uri uri2 = Uri.fromFile(new File(param )); intent.setDataAndType(uri2, &quot;text/plain&quot;); } } 5、打开音频文件 public static Intent getAudioFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); intent.putExtra(&quot;oneshot&quot;, 0); intent.putExtra(&quot;configchange&quot;, 0); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;audio/*&quot;); return intent; } 6、打开视频文件 public static Intent getVideoFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); intent.putExtra(&quot;oneshot&quot;, 0); intent.putExtra(&quot;configchange&quot;, 0); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;video/*&quot;); return intent; } 7、打开chm文件 public static Intent getChmFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;application/x-chm&quot;); return intent; } 8、打开word文件 public static Intent getWordFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;application/msword&quot;); return intent; } 9、打开Excel文件 public static Intent getExcelFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;application/vnd.ms-excel&quot;); return intent; } 10、打开ppt文件 public static Intent getPptFileIntent( String param ) { Intent intent = new Intent(&quot;android.intent.action.VIEW&quot;); intent.addCategory(&quot;android.intent.category.DEFAULT&quot;); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); Uri uri = Uri.fromFile(new File(param )); intent.setDataAndType(uri, &quot;application/vnd.ms-powerpoint&quot;); return intent; } Ps：参考资料 关于Intent的七大属性 Android中Intent概述及使用 Android Intent Action 大全","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_Intent","slug":"Android-Intent","permalink":"https://sword30021.github.io/blog/tags/Android-Intent/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]},{"title":"Android-EditText属性大全","slug":"Android-EditText属性大全","date":"2016-09-22T07:40:52.000Z","updated":"2016-10-04T00:58:15.000Z","comments":true,"path":"2016/09/22/Android-EditText属性大全/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Android-EditText属性大全/","excerpt":"","text":"EditText继承关系：View–&gt;TextView–&gt;EditText EditText的属性很多，这里介绍几个： android:hint=”请输入数字！” 设置显示在空间上的提示信息 android:numeric=”integer” 设置只能输入整数，如果是小数则是：decimal android:singleLine=”true” 设置单行输入，一旦设置为true，则文字不会自动换行。 android:password=”true” 设置只能输入密码 android:textColor = “#ff8c00” 字体颜色 android:textStyle=”bold” 字体，bold, italic, bolditalic android:textSize=”20dip” 大小 android:capitalize = “characters” 以大写字母写 android:textAlign=”center” EditText没有这个属性，但TextView有，居中&gt;android:textColorHighlight=”#cccccc” 被选中文字的底色，默认为蓝色 android:textColorHint=”#ffff00” 设置提示信息文字的颜色，默认为灰色 android:textScaleX=”1.5” 控制字与字之间的间距 android:typeface=”monospace” 字型，normal, sans, serif, monospace android:background=”@null” 背景，这里没有，指透明 android:layout_weight=”1” 权重，控制控件之间的地位,在控制控件显示的大小时蛮有用的。 android:textAppearance=”?android:attr/textAppearanceLargeInverse” 文字外观 android:layout_gravity=”center_vertical” 设置控件显示的位置：默认top，这里居中显示 bottomandroid:gray=”top” 多行中指针在第一行第一位置 et.setSelection(et.length()); 调整光标到最后一行 android:autoText 自动拼写帮助 android:capitalize 首字母大写 android:digits 设置只接受某些数字 android:singleLine 是否单行或者多行，回车是离开文本框还是文本框增加新行 android:numeric 只接受数字 android:phoneNumber 输入电话号码 android:editable 是否可编辑 android:autoLink=”all” 设置文本超链接样式当点击网址时，跳向该网址 android:textAppearance=”?android:attr/textAppearanceLargeInverse” 文字外观，这里引用的系统自带的一个外观，？表示系统是否有这种外观，否则使用默认的外观，可设置的值如下：textAppearanceButton/textAppearanceInverse/textAppearanceLarge/textAppearanceLargeInverse/textAppearanceMedium/textAppearanceMediumInverse。 android:autoLink 设置是否当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接。可选值(none/web/email/phone/map/all) android:autoText 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。 android:bufferType 指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。spannable 则可在给定的字符区域使用样式。 android:capitalize 设置英文字母大写类型。此处无效果，需要弹出输入法才能看得到。 android:cursorVisible 设定光标为显示/隐藏，默认显示。 android:digits 设置允许输入哪些字符。如“1234567890.+-*/% ()” android:drawableBottom 在text的下方输出一个drawable，如图片。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。 android:drawableLeft 在text的左边输出一个drawable，如图片。 android:drawablePadding 设置text与drawable(图片)的间隔，与drawableLeft、drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。 android:drawableRight 在text的右边输出一个drawable，如图片。 android:drawableTop 在text的正上方输出一个drawable，如图片。 android:ellipsize 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—?省略号显示在开头;”end”——省略号显示在结尾;”middle”—-省略号显示在中间;”marquee” ——以跑马灯的方式显示(动画横向移动); android:freezesText 设置保存文本的内容以及光标的位置。 android:gravity 设置文本位置，如设置成“center”，文本将居中显示。 android:hintText 为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。此属性在EditView中使用，但是这里也可以用。 android:imeOptions 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个“完成”，而不设置默认是一个回车符号。 android:imeActionId 设置IME动作ID。 android:imeActionLabel 设置IME动作标签。 android:includeFontPadding 设置文本是否包含顶部和底部额外空白，默认为true。 android:inputMethod 为文本指定输入法，需要完全限定名(完整的包名)。例如：com.google.android.inputmethod.pinyin android:inputType 设置文本的类型，用于帮助输入法显示合适的键盘类型。 android:linksClickable 设置链接是否点击连接，即使设置了autoLink。 android:marqueeRepeatLimit 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。 android:ems 设置TextView的宽度为N个字符的宽度。这里测试为一个汉字字符宽度，android:maxEms设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。android:minEms设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。 android:maxLength 限制显示的文本长度，超出部分不显示。 android:lines 设置文本的行数，设置两行就显示两行，即使第二行没有数据。 android:maxLines 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。 android:minLines 设置文本的最小行数，与lines类似。 android:lineSpacingExtra 设置行间距。 android:lineSpacingMultiplier 设置行间距的倍数。如”1.2” android:numeric 如果被设置，该TextView有一个数字输入法。 android:password 以小点”.”显示文本 android:phoneNumber 设置为电话号码的输入方式。 android:scrollHorizontally 设置文本超出TextView的宽度的情况下，是否出现横拉条。 android:selectAllOnFocus 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。 android:shadowColor 指定文本阴影的颜色，需要与shadowRadius一起使用。 android:shadowDx 设置阴影横向坐标开始位置。 android:shadowDy 设置阴影纵向坐标开始位置。 android:shadowRadius 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。 android:singleLine 设置单行显示。如果和layoutwidth一起使用，当文本不能全部显示时，后面用“…”来表示。如android:text=”test singleLine “，android:singleLine=”true” android:layout_width=”20dp”将只显示“t…”。如果不设置singleLine或者设置为false，文本将自动换行android:shadowDx设置阴影横向坐标开始位置。 android:shadowDy 设置阴影纵向坐标开始位置。 android:typeface 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3] android:height 设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米) android:maxHeight 设置文本区域的最大高度 android:minHeight 设置文本区域的最小高度 android:width 设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)，与layout_width的区别看这里。 android:maxWidth 设置文本区域的最大宽度 android:minWidth 设置文本区域的最小宽度 Ps：参考资料 Android中TextView和EditView常用属性设置 关于EditText的一点深入的了解","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Android控件","slug":"Android/开发知识/Android控件","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Android控件/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_EditText","slug":"Android-EditText","permalink":"https://sword30021.github.io/blog/tags/Android-EditText/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Android控件","slug":"Android/开发知识/Android控件","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Android控件/"}]},{"title":"Android-res/raw/assets存放资源的限制和读取方式","slug":"Android-res-raw-assets存放资源的限制和读取方式","date":"2016-09-22T06:15:02.000Z","updated":"2016-09-22T08:07:04.000Z","comments":true,"path":"2016/09/22/Android-res-raw-assets存放资源的限制和读取方式/","link":"","permalink":"https://sword30021.github.io/blog/blog/2016/09/22/Android-res-raw-assets存放资源的限制和读取方式/","excerpt":"","text":"res/raw和assets的相同点 两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制文件。 res/raw和assets的不同点 res/raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；assets文件夹下的文件不会被映射到R.java中，访问的时候需要使用AssetManager类。 res/raw文件下不可以新建目录结构，而assets则可以自定义目录结构，也就是assets目录下可以再建立文件夹。 读取文件资源 1.读取res/raw下的文件资源，通过以下方式获取输入流来进行写操作: InputStream is = getResources().openRawResource(R.id.filename); 2.读取assets下的文件资源，通过以下方式获取输入流来进行写操作: AssetManager am = null ; am = getAssets(); InputStream is = am.open(&quot;filename&quot;); 3.获取assets下的文件列表 String[] files = getAssets().list(&quot;&quot;); Android 对asset与raw的限制 在读取这两个资源文件夹中的文件时会有一定的限制，即单个文件大小不能超过1M ，如果读取超过1M的文件会报 “Data exceeds UNCOMPRESS_DATA_MAX (1314625 vs 1048576)” 的IOException。","categories":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/tags/Android/"},{"name":"Android_Resource","slug":"Android-Resource","permalink":"https://sword30021.github.io/blog/tags/Android-Resource/"}],"keywords":[{"name":"Android","slug":"Android","permalink":"https://sword30021.github.io/blog/categories/Android/"},{"name":"开发知识","slug":"Android/开发知识","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/"},{"name":"Other","slug":"Android/开发知识/Other","permalink":"https://sword30021.github.io/blog/categories/Android/开发知识/Other/"}]}]}